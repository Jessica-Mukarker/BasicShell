#include "stdio.h"
#include "string.h"
#include "stdlib.h"
#include "sys/wait.h"
#include "unistd.h"

void read_command(char cmd[], char *par[]) {
    char line[1024];
    int count = 0, i = 0, j = 0;
    char *array[100], *pch;

    for (;;) {
        int c = fgetc(stdin);
        line[count++] = (char) c;
        if (c == '\n') {
            break;
        }
        if (count == 1) {
            return;
        }
        pch = strtok(line, "\n");

        while (pch != NULL)
#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <ctype.h>
#include <dirent.h>
#include <fcntl.h>
#include <string.h>
#include <time.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <pwd.h>
#include <libgen.h>
#define DEBUG 1
#define MAXLINELEN 4096
#define MAXARGS 128
#define END_OF_LINE 0
#define SEQ_OP ';'
#define SEQUENCE 1
#define BUFFERSIZE 20
#define FORMAT "%5s %s\t%8s %s\n"

void shell (int);
void reset (void);
static void split (char *cmd);
static char *args[512];

int zone = 0;
int fd[2];
pid_t pid;
int ret;
int fd_multiple = 0;

struct cmd
{
  struct cmd *next;
  int terminator;
  char *exe_path;
  int nargs;
  char *arg[MAXARGS];
  char *tok;
};

void *
ck_malloc (size_t size)
{
  void *ret = malloc (size);
  if (!ret)
    {
      perror ("dumbshell:ck_malloc");
      exit (1);
    }
  return ret;
}

char *
skip_to_non_ws (char *p)
{
  int ch;
  while (ch = *p)
    {
      if (ch != ' ' && ch != '\t' && ch != '\n')
	return p;
      ++p;
    }
  return 0;
}

char *
skip_to_ws_or_sep (char *p)
{
  int ch;
  while (ch = *p)
    {
      if (ch == ' ' || ch == '\t' || ch == '\n')
	return p;
      if (ch == SEQ_OP)
	return p;
      ++p;
    }
  return 0;
}

struct cmd *
parse_commands (char *line)
{
  char *ptr;
  int ix;
  struct cmd *cur;
  ptr = skip_to_non_ws (line);
  if (!ptr)
    return 0;
  cur = ck_malloc (sizeof *cur);
  cur->next = 0;
  cur->exe_path = ptr;
  cur->arg[0] = ptr;
  cur->terminator = END_OF_LINE;
  ix = 1;
  for (;;)
    {
      ptr = skip_to_ws_or_sep (ptr);
      if (!ptr)
	{
	  break;
	}
      if (*ptr == SEQ_OP)
	{
	  *ptr = 0;
	  cur->next = parse_commands (ptr + 1);
	  if (cur->next)
	    {
	      cur->terminator = SEQUENCE;
	    }
	  break;
	}
      *ptr = 0;
      ptr = skip_to_non_ws (ptr + 1);
      if (!ptr)
	{
	  break;
	}
      if (*ptr == SEQ_OP)
	{
	  /* found a sequence operator */
	  cur->next = parse_commands (ptr + 1);
	  if (cur->next)
	    {
	      cur->terminator = SEQUENCE;
	    }
	  break;
	}
      cur->arg[ix] = ptr;
      ++ix;
    }
  cur->arg[ix] = 0;
  cur->nargs = ix;
  return cur;
}

void
execute (struct cmd *clist)
{
  int pid, npid, stat;

  pid = fork ();
  if (pid == -1)
    {
      perror ("dumbshell:fork");
      exit (1);
    }
  if (!pid)
    {
      /* child */
      execvp (clist->exe_path, clist->arg);
      fprintf (stderr, "No such command: %s\n", clist->exe_path);
      exit (1);
    }
  do
    {
      npid = wait (&stat);
      printf ("Process %d exited with status %d\n", npid, stat);
    }
  while (npid != pid);
  switch (clist->terminator)
    {
    case SEQUENCE:
      execute (clist->next);
    }
}

//methods added//
// methods for the line
char
login ()
{
  char *sentence = getlogin ();
  return *sentence;
}

//return the host name
char
name ()
{
  char name[HOST_NAME_MAX];
  return gethostname (name, HOST_NAME_MAX + 1);
}

void
ps ()
{
  //variables
  DIR *dir;
  struct dirent *ent;
  int i;
  int fd;
  int fd_self;
  unsigned long time;
  unsigned long stime;
  char flag;
  char *tty;
  char cmd[256], tty_self[256], path[256], time_s[256];
  FILE *file;

  dir = opendir ("/proc");
  fd_self = open ("/proc/self/fd/0", O_RDONLY);
  snprintf (tty_self, sizeof (tty_self), "%s", ttyname (fd_self));
  printf (FORMAT, "PID", "TTY", "TIME", "CMD");
  //loop for reading all the directories
  while ((ent = readdir (dir)) != NULL)
    {
      flag = 1;
      for (i = 0; ent->d_name[i]; i++)
	if (!isdigit (ent->d_name[i]))
	  {
	    flag = 0;
	    break;

	  }
      if (flag)
	{			//if it is not a digit it can apply this code
	  snprintf (path, 267, "/proc/%s/fd/0", ent->d_name);
	  fd = open (path, O_RDONLY);
	  tty = ttyname (fd);
	  // if its the running process
	  if (tty && strcmp (tty, tty_self) == 0)
	    {

	      snprintf (path, 270, "/proc/%s/stat", ent->d_name);
	      file = fopen (path, "r");
	      fscanf (file, "%d%s%c%c%c", &i, cmd, &flag, &flag, &flag);
	      cmd[strlen (cmd) - 1] = '\0';
// for calculating the time for each process
	      for (i = 0; i < 11; i++)
		fscanf (file, "%lu", &time);
	      fscanf (file, "%lu", &stime);
	      time = (int) ((double) (time + stime) / sysconf (_SC_CLK_TCK));
	      snprintf (time_s, sizeof (time_s), "%02lu:%02lu:%02lu",
			(time / 3600) % 3600, (time / 60) % 60, time % 60);
//printing the information about the process
	      printf (FORMAT, ent->d_name, tty + 5, time_s, cmd + 1);
	      fclose (file);
	    }
	  close (fd);
	}
    }
  close (fd_self);
}

//ps -A
// print some information about all the processes 
void
psA ()
{
//variables
  DIR *dir;
  struct dirent *ent;
  int i;
  int fd;
  int fd_self;
  unsigned long time;
  unsigned long stime;
  char flag;
  char *tty;
  char cmd[256], tty_self[256], path[256], time_s[256];
  FILE *file;

  dir = opendir ("/proc");
  fd_self = open ("/proc/self/fd/0", O_RDONLY);
  snprintf (tty_self, sizeof (tty_self), "%s", ttyname (fd_self));
  printf (FORMAT, "PID", "TTY", "TIME", "CMD");
  //loop for reading all the directories
  while ((ent = readdir (dir)) != NULL)
    {
      flag = 1;
      for (i = 0; ent->d_name[i]; i++)
	{
	  //check if it is not a digit
	  if (!isdigit (ent->d_name[i]))
	    {
	      flag = 0;
	      break;
	    }
	}
      //if it is not a digit it can apply this code

      if (flag)
	{
	  snprintf (path, 267, "/proc/%s/fd/0", ent->d_name);
	  fd = open (path, O_RDONLY);
	  tty = ttyname (fd);

	  char *syso;
	  if (tty == '\0')
	    {
	      syso = "?";
	      snprintf (path, 270, syso);
	    }
	  else
	    syso = tty + 5;

	  snprintf (path, 270, "/proc/%s/stat", ent->d_name);
	  file = fopen (path, "r");
	  fscanf (file, "%d%s%c%c%c", &i, cmd, &flag, &flag, &flag);
	  cmd[strlen (cmd) - 1] = '\0';

	  // for calculating the time for each process
	  for (i = 0; i < 11; i++)
	    fscanf (file, "%lu", &time);
	  fscanf (file, "%lu", &stime);
	  time = (int) ((double) (time + stime) / sysconf (_SC_CLK_TCK));
	  snprintf (time_s, sizeof (time_s), "%02lu:%02lu:%02lu",
		    (time / 3600) % 3600, (time / 60) % 60, time % 60);
//printing the information about the process
	  printf (FORMAT, ent->d_name, syso, time_s, cmd + 1);
	  fclose (file);

	  close (fd);
	  close (fd_self);
	}
    }
}

//kill
//kill pid

void
killpid (char *str)
{
  kill (atoi (str), SIGTERM);
}

//kill-l 
void
killL ()
{
  printf (" 15) SIGTERM \n 9)SIGKILL \n 1)SIGHUP \n");
}

// kill with a specific signal
void
kill3 (char *str, int t)
{
  kill (atoi (str), t);
}

// pwd command for printing the current working directory
void
printDir ()
{
  char currentDir[1000];
  if (getcwd (currentDir, sizeof (currentDir)) != NULL)
    {
      printf ("pwd: %s\n", currentDir);
    }
  else
    {
      perror ("error");
    }
}

 // searching if the second input is null
int
searchifnull (char *arr[])
{
  if (arr[1] == '\0')
    return 1;
  return -1;
}

int
hasPrefix (char const *p, char const *q)
{
  int i = 0;
  for (i = 0; q[i]; i++)
    {
      if (p[i] != q[i])
	return -1;
    }
  return 0;
}

void
free_commands (struct cmd *clist)
{
  struct cmd *nxt;
  do
    {
      nxt = clist->next;
      free (clist);
      clist = nxt;
    }
  while (clist);
}

char *
get_command (char *buf, int size, FILE * in)
{


  if (in == stdin)
    {
      char pwd[1024];
      getcwd (pwd, sizeof (pwd));

      char str[256];
      snprintf (str, sizeof (str), "Jessica @virtualbox :~/%s$ ",
		basename (pwd));

      fputs (str, stdout);	/* prompt */
    }
  return fgets (buf, size, in);
}

void
reset ()
{
  zone = 0;
  fd_multiple = 0;
  fd[0] = 0;
  fd[1] = 0;
  args[0] = 0;
}

static void
removelastspace (char *s)
{
  char *tmp = strchr (s, '\0');
  tmp = tmp - 1;
  if (strcmp (tmp, " ") == 0)
    {
      *tmp = '\0';
      removelastspace (s);
    }
}

void
pipeSequence (char *args[], int pipesCount, int k)
{
  ret = pipe (fd);
  if (ret == -1)
    {
      printf ("Unable to pipe\n");
      return;
    }
  pid = fork ();
  if (pid == -1)
    {
      exit (EXIT_FAILURE);
    }
  else if (pid == 0)		// Child Process
    {
      dup2 (fd_multiple, 0);
      if (zone < pipesCount)
	{
	  dup2 (fd[1], 1);
	}
      close (fd[0]);

      for (int j = 0; j < k; j++)
	{
	  if (strcmp (args[j], ">") == 0)
	    {
	      args[j] = NULL;
	      j = j + 1;	//filename

	      close (1);

	      char fn[100];
	      strncpy (fn, args[j], 99);

	      int lfd = open (fn, O_RDWR | O_TRUNC);

	      if (lfd == -1)
		{
		  open (fn, O_CREAT | O_RDWR | O_TRUNC);
		}
	      args[j] = NULL;
	    }
	  else if (strcmp (args[j], ">>") == 0)
	    {
	      args[j] = NULL;
	      j = j + 1;	//filename

	      close (1);

	      char fn[100];
	      strncpy (fn, args[j], 99);

	      int lfd = open (fn, O_RDWR | O_APPEND);

	      if (lfd == -1)
		{
		  open (fn, O_CREAT | O_RDWR | O_APPEND);
		}
	      args[j] = NULL;
	    }
	  else if (strcmp (args[j], "2>&1") == 0)
	    {
	      close (2);
	      dup (1);
	      args[j] = NULL;
	    }
	  else if (args[j][0] == '2')
	    {
	      char *localptr = &args[j][0];
	      localptr = localptr + 2;
	      char fn[100];
	      strncpy (fn, localptr, 99);

	      close (2);
	      close (1);

	      int lfd = open (fn, O_RDWR | O_TRUNC);

	      if (lfd == -1)
		{
		  open (fn, O_CREAT | O_RDWR | O_TRUNC);
		}

	      //Move the open statement before close (1) to see effect of stderr on output file. 
	      //Here we move our own error message to see effect of error

	      args[j] = NULL;
	    }
	  else if (args[j][0] == '1')
	    {
	      char *localptr = &args[j][0];
	      localptr = localptr + 2;
	      char fn[100];
	      strncpy (fn, localptr, 99);

	      close (1);

	      int lfd = open (fn, O_RDWR | O_TRUNC);

	      if (lfd == -1)
		{
		  open (fn, O_CREAT | O_RDWR | O_TRUNC);
		}
	      args[j] = NULL;
	    }
	  else if (strcmp (args[j], "<") == 0)
	    {
	      args[j] = NULL;
	      j = j + 1;	//filename

	      close (0);

	      char fn[100];
	      strncpy (fn, args[j], 99);

	      int lfd = open (fn, O_RDONLY);

	      if (lfd == -1)
		{
		  open (fn, O_CREAT | O_RDWR | O_TRUNC);
		}
	      args[j] = NULL;
	    }
	}

      ret = execvp (args[0], args);
      if (ret == -1)
	{
	  printf ("Unable to execute\n");
	  exit (0);
	}
    }
  else				// Parent Process
    {
      wait (NULL);
      close (fd[1]);
      fd_multiple = fd[0];

    }
}




void
main (void)
{
  char *line;
  char *str;

  char linebuf[MAXLINELEN];
  struct cmd *commands;

//checking the commands that the user wrote and apply it
  while (get_command (linebuf, MAXLINELEN, stdin) != NULL)
    {

      commands = parse_commands (linebuf);

      if (strcmp (commands->arg[0], "kill") == 0)
	{

	  // if the user asked for kill -l 
	  if (strcmp (commands->arg[1], "-l") == 0)
	    {


	      killL ();
	    }
	  //if the user asked for killing a process with a speific signal 
	  else
	    if (((strcmp (commands->arg[1], "SIGTERM") == 0)
		 || (strcmp (commands->arg[1], "15") == 0))
		&& commands->arg[3] == NULL)
	    kill3 (commands->arg[2], 15);

	  //if the user asked for killing a process with a speific signal 
	  else
	    if (((strcmp (commands->arg[1], "SIGKILL") == 0)
		 || (strcmp (commands->arg[1], "9") == 0))
		&& commands->arg[3] == NULL)
	    kill3 (commands->arg[2], 9);
	  //if the user asked for killing a process with a speific signal 
	  else
	    if (((strcmp (commands->arg[1], "SIGHUP") == 0)
		 || (strcmp (commands->arg[1], "1") == 0))
		&& (strcmp (commands->arg[3], "") == 0))

	    kill3 (commands->arg[2], 1);

	  //if the user asked for killing more than one process with SIGHUB signal 
	  else if ((strcmp (commands->arg[1], "SIGHUP") == 0)
		   || (strcmp (commands->arg[1], "1") == 0)
		   && commands->arg[3] != NULL)
	    {

	      for (int i = 2; i < 4; i++)	// to kill more than one pid(if there's more than one)
		kill3 (commands->arg[i], 1);
	    }
	  //if the user asked for killing more than one process with the SIGKILL signal
	  else if ((strcmp (commands->arg[1], "SIGKILL") == 0)
		   || (strcmp (commands->arg[1], "9") == 0))


	    for (int i = 2; i < 4; i++)	// to kill more than one pid(if there's more than one)
	      kill3 (commands->arg[i], 9);

	  //if the user asked for killing more than one process with SIGTERM signal
	  else if ((strcmp (commands->arg[1], "SIGTERM") == 0)
		   || (strcmp (commands->arg[1], "15") == 0))

	    for (int i = 2; i < 4; i++)	// to kill more than one pid(if there's more than one)
	      kill3 (commands->arg[i], 15);



	  else
	    killpid (commands->arg[1]);

	}

      // if the user asked  for change directory command
      else if (strcmp (commands->arg[0], "cd") == 0)
	{

	  chdir (commands->arg[1]);

	}
      // if the user asked  for print current working directory command
      else if (strcmp (commands->arg[0], "pwd") == 0)
	{
	  printDir ();
	}

      // if the user asked for information about the running processes 
      else if (strcmp (commands->arg[0], "ps") == 0)
	{

	  if (searchifnull (commands->arg) != -1)
	    ps ();
	  else
	    {
	      // if the user asked for information about all the processes 
	      printf ("psA recognized\n");
	      psA ();
	    }
	}
      else
	{
	  if (commands)
	    {
	      execute (commands);
	      free_commands (commands);
	    }
	}
    }
}
/*

//previous codenot used//

int main ()
{
  printf ("Welcome to basic shell\n");

  signal (SIGINT, shell);
  shell (0);
  return 0;
}

void shell (int signal)
{
  char command[1024];
  int flag = 1;
  printf ("Back to Shell\n");

  do
    {
      printf ("$");

      scanf ("%[^\n]%*c", command);

      removelastspace (command);

      int pipesCount = 0;
      for (int i = 0; i < strlen (command); i++)
	{
	  if (command[i] == '|')
	    {
	      pipesCount++;
	    }
	}
      //printf("Number of pipes : %d\n", pipesCount);

      char pipeCommands[pipesCount + 1][100];
      int j = 0, k = 0;
      for (int i = 0; i < strlen (command); i++)
	{
	  if (command[i] == '|')
	    {
	      pipeCommands[j][k - 1] = '\0';
	      j++;
	      k = 0;
	    }
	  else if (command[i] == ' ')
	    {
	      pipeCommands[j][k] = '$';
	      k++;
	    }
	  else
	    {
	      pipeCommands[j][k] = command[i];
	      k++;

	    }
	}
      pipeCommands[j][k] = '\0';

      for (int i = 0; i < pipesCount + 1; i++)	// Loop for each pipe sequence
	{
	  //printf("Pipe command : %s\n", pipeCommands[i]);
	  char *args[10];
	  int k = 0;
	  if (i == 0)
	    {			// First command doesn't has starting symbol $
	      args[0] = &pipeCommands[i][0];
	      k++;
	    }
	  unsigned int size = strlen (pipeCommands[i]);
	  for (int j = 0; j < size; j++)
	    {
	      if (pipeCommands[i][j] == '$')
		{
		  pipeCommands[i][j] = '\0';
		  args[k] = &pipeCommands[i][j + 1];
		  k++;
		}
	    }
	  args[k] = NULL;
	  if (strcmp (args[0], "exit") == 0)
	    {
	      exit (0);
	    }
	  pipeSequence (args, pipesCount, k);
	  zone++;
	}
      reset ();
    }
  while (flag == 1);}

*/
